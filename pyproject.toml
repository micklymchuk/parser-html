[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "html-rag-pipeline"
version = "2.0.0"
description = "A modern, production-ready HTML RAG pipeline for processing web content into searchable vector databases"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "HTML RAG Pipeline Team" }
]
maintainers = [
    { name = "HTML RAG Pipeline Team" }
]
keywords = [
    "rag", "html", "nlp", "machine-learning", "vector-database", 
    "search", "embedding", "chroma", "wayback", "ukrainian"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=1.11.0",
    "transformers>=4.21.0",
    "sentence-transformers>=2.2.0",
    "beautifulsoup4>=4.11.0",
    "chromadb>=0.4.0",
    "pydantic>=2.0.0",
    "loguru>=0.7.0",
    "click>=8.0.0",
    "tqdm>=4.64.0",
    "psutil>=5.9.0",
    "validators>=0.20.0",
    "python-dotenv>=1.0.0",
    # Content Analytics dependencies
    "spacy>=3.4.0",
    "scikit-learn>=1.1.0",
    "fuzzywuzzy>=0.18.0",
    "python-levenshtein>=0.12.0",
    "networkx>=2.8.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "textstat>=0.7.0",
    "wordcloud>=1.9.0",
    "numpy>=1.21.0",
    "pandas>=1.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
    "sphinx-autodoc-typehints>=1.23.0",
]
performance = [
    "accelerate>=0.20.0",
    "optimum>=1.8.0",
]
analytics = [
    "spacy-udpipe>=1.0.0",
    "datasets>=2.0.0",
    "plotly>=5.0.0",
    "jupyterlab>=3.4.0",
]
all = [
    "html-rag-pipeline[dev,docs,performance,analytics]"
]

[project.urls]
Homepage = "https://github.com/html-rag-pipeline/html-rag-pipeline"
Documentation = "https://html-rag-pipeline.readthedocs.io/"
Repository = "https://github.com/html-rag-pipeline/html-rag-pipeline.git"
"Bug Reports" = "https://github.com/html-rag-pipeline/html-rag-pipeline/issues"
"Feature Requests" = "https://github.com/html-rag-pipeline/html-rag-pipeline/issues"

[project.scripts]
html-rag = "html_rag.cli.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
html_rag = ["py.typed"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "sentence_transformers.*",
    "chromadb.*",
    "beautifulsoup4.*",
    "bs4.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=html_rag",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ukrainian: marks tests related to Ukrainian content",
    "wayback: marks tests related to Wayback Machine processing",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/html_rag"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8 configuration
[tool.flake8]
max-line-length = 100
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    "*.egg-info",
]

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test